// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'logbox.dart';
import 'model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3963432711659494152),
      name: 'Note',
      lastPropertyId: const obx_int.IdUid(6, 4527056660621989803),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7716944047731403087),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8201031876956768687),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2066655448022955292),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4013641197177993205),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3555424079252118234),
            name: 'app',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4527056660621989803),
            name: 'enviroment',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2483238509986489644),
      name: 'LogBox',
      lastPropertyId: const obx_int.IdUid(7, 1148243846927513708),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5922703834708480404),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1662223233615332425),
            name: 'app',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1390572751923345432),
            name: 'isDebug',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7498895360715410172),
            name: 'loggerName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1036319374081199350),
            name: 'timeStamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7663187363204109331),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1148243846927513708),
            name: 'level',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 2483238509986489644),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Note: obx_int.EntityDefinition<Note>(
        model: _entities[0],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          final appOffset =
              object.app == null ? null : fbb.writeString(object.app!);
          final enviromentOffset = object.enviroment == null
              ? null
              : fbb.writeString(object.enviroment!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addInt64(3, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(4, appOffset);
          fbb.addOffset(5, enviromentOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Note()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..message = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..date = dateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateValue)
            ..app = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..enviroment = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        }),
    LogBox: obx_int.EntityDefinition<LogBox>(
        model: _entities[1],
        toOneRelations: (LogBox object) => [],
        toManyRelations: (LogBox object) => {},
        getId: (LogBox object) => object.id,
        setId: (LogBox object, int id) {
          object.id = id;
        },
        objectToFB: (LogBox object, fb.Builder fbb) {
          final appOffset =
              object.app == null ? null : fbb.writeString(object.app!);
          final loggerNameOffset = object.loggerName == null
              ? null
              : fbb.writeString(object.loggerName!);
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, appOffset);
          fbb.addBool(2, object.isDebug);
          fbb.addOffset(3, loggerNameOffset);
          fbb.addInt64(4, object.timeStamp?.millisecondsSinceEpoch);
          fbb.addOffset(5, messageOffset);
          fbb.addOffset(6, levelOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timeStampValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = LogBox()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..app = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..isDebug =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8)
            ..loggerName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..timeStamp = timeStampValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeStampValue)
            ..message = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// See [Note.id].
  static final id = obx.QueryIntegerProperty<Note>(_entities[0].properties[0]);

  /// See [Note.name].
  static final name = obx.QueryStringProperty<Note>(_entities[0].properties[1]);

  /// See [Note.message].
  static final message =
      obx.QueryStringProperty<Note>(_entities[0].properties[2]);

  /// See [Note.date].
  static final date = obx.QueryDateProperty<Note>(_entities[0].properties[3]);

  /// See [Note.app].
  static final app = obx.QueryStringProperty<Note>(_entities[0].properties[4]);

  /// See [Note.enviroment].
  static final enviroment =
      obx.QueryStringProperty<Note>(_entities[0].properties[5]);
}

/// [LogBox] entity fields to define ObjectBox queries.
class LogBox_ {
  /// See [LogBox.id].
  static final id =
      obx.QueryIntegerProperty<LogBox>(_entities[1].properties[0]);

  /// See [LogBox.app].
  static final app =
      obx.QueryStringProperty<LogBox>(_entities[1].properties[1]);

  /// See [LogBox.isDebug].
  static final isDebug =
      obx.QueryBooleanProperty<LogBox>(_entities[1].properties[2]);

  /// See [LogBox.loggerName].
  static final loggerName =
      obx.QueryStringProperty<LogBox>(_entities[1].properties[3]);

  /// See [LogBox.timeStamp].
  static final timeStamp =
      obx.QueryDateProperty<LogBox>(_entities[1].properties[4]);

  /// See [LogBox.message].
  static final message =
      obx.QueryStringProperty<LogBox>(_entities[1].properties[5]);

  /// See [LogBox.level].
  static final level =
      obx.QueryStringProperty<LogBox>(_entities[1].properties[6]);
}
